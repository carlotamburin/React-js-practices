Vježba3 (iterators-generators-promises)
1.	Napisati funkciju koja prima niz i u njoj kreirati for petlju koja iterira kroz elemente niza i vraća sumu elemenata.
2.	Napisati „iterator funkciju“ koja kao argument prima niz elemenata, te vraća funkciju koja pri svakom pozivu vraća sljedeći član niza sa konkateniranim stringom „je  n-ti element niza“. (hint. closure).
3.	Kreirati „iterator funkciju“ koja prima niz i vraća objekt koji sadrži next metodu. Svaki poziv next metode vraća sljedeći element niza i njegov index u nizu (metoda next vraća niz koji se sastoji od dva člana).
4.	Napisati „iterator funkciju“ koja prima string riječi odvojenih razmakom, te vraća objekt koji na sebi ima metodu next. Svakim pozivom metode next, vraća se jedna po jedna riječ. 
5.	Riješiti prethodni zadatak koristeći generator funkciju.
6.	Napisati funkciju simulacijaRazgovora koja će vratiti „hej“ ili „besmislica“ svako tri sekunde, u ovisnosti o tome je li riječ koja je prosljeđena u funkciju glasi „generator“. Nije dozvoljeno koristiti petlje, a funkcija simulacijaRazgovora će se pozvati samo jednom. (Pojašnjenje. koristiti generator funkciju. U funkciju simulacijaRazgovora se šalje niz stringova. Funkcija simulacijaRazgovora završava kada se za svaku riječ iz niza ispiše „besmislica“ ili „hej“. Hint-clearInterval() se poziva kada je povrat iz next-a {value:undefined, done:true} ).
7.	Koristeći async await pattern, ispisati rečenicu koja se sastoji od imenice i glagola. Pozvati async funkciju i prosljediti joj imenicu. Unutar async funkcije koristiti ključnu riječ await kako bi se dobio povrat iz ne-async-funkcije koja prima imenicu i konkatenira hardkodirani glagol i to vraća. Povrat ispisati nakon tri sekunde.
8.	Kreirati promise koji će se nakon 1000 ms resolve-ati u string „Resolved“, koristeći metodu setTimeout(). Funkcija koja je zadužena za printanje resolved promisa, se prosljeđuje u promise preko then() metode.  (https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Global_Objects/Promise )
9.	Kreirati promise koji će se odmah reject-ati. Iz funkcije koja se pozvala kada je promise reject-an printati „Error“(hint. nad promise objektom pozvati metodu catch).
10.	Promisi su asinhroni i sada ćemo to i dokazati. Kreirati promise koji će se resolve-ati sa vrijednošću „Promise has been resolved!“. Nakon toga ubaciti sljedeći kod:
promise.then(() => console.log('Promise has been resolved!'));
console.log("I'm not the promise!");
Koji redosljed ispisa očekujete? Zašto?

11.	Ovaj zadatak nije obavezan. 
Niže je naveden objekt fakePeople koji imitira podatke izvučene iz baze podataka. Napisati funkciju fakeAPICall(i) koja vraća promise koji će se resolve-ati u podatke osobe na i-tom mjestu. Promise resolve-ati nakon random broja milisekundi između 1000 i 3000. Napisati funkciju getAllData, koja koristi Promise.all kako bi se 3 API poziva fakeAPICall(i) izvršila istovremeno. Argument i odabrati proizvoljno. U slučaju da je i veći od 3, reject-ati promise.
Promise.all 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all 
const fakePeople = [
  { name: 'Ivo', hasPets: false},
  { name: 'Eva', hasPets: true},
  { name: 'Marko', hasPets: true}
]




